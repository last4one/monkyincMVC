package com.monkyinc.myweb;

import java.text.DateFormat;
import java.util.Date;
import java.util.Locale;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.monkyinc.myweb.model.Usuario;

import java.util.UUID;


/**
 * Handles requests for the application home page.
 */
@Controller
public class HomeController {
	
	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
	
	@PersistenceContext
	private EntityManager entityManager;
	
	/**
	 * Intercepts login requests generated by the header; then continues to load normal page
	 */
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	@Transactional
	public String login(HttpServletRequest request, Model model, HttpSession session) {
		String formLogin = request.getParameter("login");
		String formPass = request.getParameter("pass");
		String formSource = request.getParameter("source");
		logger.info("Login attempt from '{}' while visiting '{}'", formLogin, formSource);
		
		// validate request
		if (formLogin == null || formLogin.length() < 4 || formPass == null || formPass.length() < 4) {
			model.addAttribute("loginError", "usuarios y contraseñas: 4 caracteres mínimo");
		} else {
			Usuario u = null;
			try {
				u = (Usuario)entityManager.createNamedQuery("userByLogin")
					.setParameter("loginParam", formLogin).getSingleResult();
				if (u.isPassValid(formPass)) {
					logger.info("pass was valid");				
					session.setAttribute("user", u);
					// sets the anti-csrf token
					getTokenForSession(session);
				} else {
					logger.info("pass was NOT valid");
					model.addAttribute("loginError", "error en usuario o contraseña");
				}
			} catch (NoResultException nre) {
				if (formPass.length() == 4) {
					/*
					// UGLY: register new users if they do not exist and pass is 4 chars long
					logger.info("no-such-user; creating user {}", formLogin);				
					Usuario user = Usuario.createUser(formLogin, formPass, "user");
					entityManager.persist(user);				
					session.setAttribute("user", user);
					getTokenForSession(session);
					*/
				} else {
					logger.info("no such login: {}", formLogin);
				}
				model.addAttribute("loginError", "error en usuario o contraseña");
			}
		}
		
		// redirects to view from which login was requested
		return "redirect:" + formSource;
	}
	
	/**
	 * Toggles debug mode
	 */
	@RequestMapping(value = "/debug", method = RequestMethod.GET)
	public String debug(HttpSession session, HttpServletRequest request) {
		String formDebug = request.getParameter("debug");
		logger.info("Setting debug to {}", formDebug);
		session.setAttribute("debug", 
				"true".equals(formDebug) ? "true" : "false");
		return "redirect:/";
	}
	
	/**
	+	 * Adds an user; return JSON indicating success or failure
	+	 */
		@RequestMapping(value = "/addUser", method = RequestMethod.POST)
		@ResponseBody
		@Transactional // needed to allow DB change
		public ResponseEntity<String> addUser(
				@RequestParam("name") String name, @RequestParam("surname") String surname,
				@RequestParam("email") String email, @RequestParam("username") String username,
				@RequestParam("password") String password, @RequestParam("repassword") String repassword,
				@RequestParam("adress") String adress, @RequestParam("phone") String phone,
				@RequestParam("csrf") String token, HttpSession session,
				HttpServletRequest request, Model model) {
			
			String formLogin = request.getParameter("login");
			String formPass = request.getParameter("pass");
			
			if (password.equalsIgnoreCase(repassword)||! isTokenValid(session, token)) {
				return new ResponseEntity<String>("Error: password error or bad auth", 
						HttpStatus.FORBIDDEN);
			} else {
				//Password??
				Usuario user = Usuario.createUser(formLogin, formPass, "user",name,  surname,  email,  adress, phone);
				entityManager.persist(user);				
				session.setAttribute("user", user);
				getTokenForSession(session);
			
				return new ResponseEntity<String>("Ok: user " + name + " added", 
						HttpStatus.OK);
			} 

		}
		//XSS version begin
		/**
		+	 * Delete a user; return JSON indicating success or failure
		+	 */
		@RequestMapping(value = "/editUser", method = RequestMethod.POST)
		@Transactional // needed to allow DB change
		public String editUser(@RequestParam("id") long id,
				@RequestParam("csrf") String token, HttpSession session,
				HttpServletRequest request, Model model) {
			Usuario u = entityManager.find(Usuario.class, id);
			String correo = request.getParameter("email");
			u.setCorreo(correo);
			model.addAttribute("u", u);
			return "user";
		}
		
		@RequestMapping(value = "/editUser", method = RequestMethod.GET)
		@Transactional // needed to allow DB change
		public String editUser(@RequestParam("id") long id, Model model, HttpSession session) {
			Usuario u = entityManager.find(Usuario.class, id);
			model.addAttribute("u", u);
			return "user";
		}			
		
	//XSS version begin
	/**
	+	 * Delete a user; return JSON indicating success or failure
	+	 */
		@RequestMapping(value = "/delUser", method = RequestMethod.POST)
		@ResponseBody
		@Transactional // needed to allow DB change
		public ResponseEntity<String> bookAuthors(@RequestParam("id") long id,
				@RequestParam("csrf") String token, HttpSession session) {
			if ( ! isAdmin(session) || ! isTokenValid(session, token)) {
				return new ResponseEntity<String>("Error: no such user or bad auth", 
						HttpStatus.FORBIDDEN);
			} else if (entityManager.createNamedQuery("delUser")
					.setParameter("idParam", id).executeUpdate() == 1) {
				return new ResponseEntity<String>("Ok: user " + id + " removed", 
						HttpStatus.OK);
			} else {
				return new ResponseEntity<String>("Error: no such user", 
						HttpStatus.BAD_REQUEST);
			}
		}
		
		/**
		+	 * Checks the anti-csrf token for a session against a value
		+	 * @param session
		+	 * @param token
		+	 * @return the token
		+	 */
			static boolean isTokenValid(HttpSession session, String token) {
			    Object t=session.getAttribute("csrf_token");
			    return (t != null) && t.equals(token);
			}
			
			/**
			 * Returns an anti-csrf token for a session, and stores it in the session
			 * @param session
			 * @return
			 */
			static String getTokenForSession (HttpSession session) {
			    String token=UUID.randomUUID().toString();
			    session.setAttribute("csrf_token", token);
			    return token;
			}
			
			/** 
			 * Returns true if the user is logged in and is an admin
			 */
			static boolean isAdmin(HttpSession session) {
				Usuario u = (Usuario)session.getAttribute("user");
				if (u != null) {
					return u.getRole().equals("admin");
				} else {
					return false;
				}
			}
			//XSS version begin	
	/**
	 * Logout (also returns to home view).
	 */
	@RequestMapping(value = "/logout", method = RequestMethod.GET)
	public String logout(HttpSession session) {
		logger.info("User '{}' logged out", session.getAttribute("user"));
		session.invalidate();
		return "redirect:/";
	}
	
	/**
	 * Displays producto details
	 */
	@RequestMapping(value = "/producto/{id}", method = RequestMethod.GET)
	public String producto(@PathVariable("id") long id, Model model) {
		try {
			model.addAttribute("producto", entityManager.createNamedQuery("productoById")
				.setParameter("idParam", id).getSingleResult());
		} catch (NoResultException nre) {
			logger.error("No such producto: {}", id, nre);
		}
		model.addAttribute("prefix", "../");
		return "producto";
	}	
	
	/**
	 * Displays pedido details
	 */
	@RequestMapping(value = "/pedido/{id}", method = RequestMethod.GET)
	public String pedido(@PathVariable("id") long id, Model model) {		
		try {
			model.addAttribute("pedido", entityManager.createNamedQuery("pedidoById")
				.setParameter("idParam", id).getSingleResult());
		} catch (NoResultException nre) {
			logger.error("No such pedido: {}", id, nre);
		}
		model.addAttribute("prefix", "../");
		return "pedido";
	}	
	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String home(Locale locale, Model model) {
		logger.info("Welcome home! The client locale is {}.", locale);
		
		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);
		
		String formattedDate = dateFormat.format(date);
		
		model.addAttribute("serverTime", formattedDate );
		model.addAttribute("pageTitle", "MonkyInc:Bienvenido");
		
		return "home";
	}
	
	@RequestMapping(value = "/admin", method = RequestMethod.GET)
	public String admin(Locale locale, Model model) {
		logger.info("Welcome home! The client locale is {}.", locale);
		
		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);
		
		String formattedDate = dateFormat.format(date);
		
		model.addAttribute("serverTime", formattedDate );
		model.addAttribute("pageTitle", "Administracion");
		return "admin";
	}
	
	@RequestMapping(value = "/account", method = RequestMethod.GET)
	public String account(Locale locale, Model model) {
		logger.info("Welcome home! The client locale is {}.", locale);
		
		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);
		
		String formattedDate = dateFormat.format(date);
		
		model.addAttribute("serverTime", formattedDate );
		model.addAttribute("pageTitle", "Mi cuenta");
		return "account";
	}
	
	@RequestMapping(value = "/contact", method = RequestMethod.GET)
	public String contact(Locale locale, Model model) {
		logger.info("Welcome home! The client locale is {}.", locale);
		
		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);
		
		String formattedDate = dateFormat.format(date);
		
		model.addAttribute("serverTime", formattedDate );
		model.addAttribute("pageTitle", "Contacto");
		return "contact";
	}
	
	@RequestMapping(value = "/register", method = RequestMethod.GET)
	public String register(Locale locale, Model model) {
		logger.info("Welcome home! The client locale is {}.", locale);
		
		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);
		
		String formattedDate = dateFormat.format(date);
		
		model.addAttribute("serverTime", formattedDate );
		model.addAttribute("pageTitle", "Registro");
		return "register";
	}
	
	@RequestMapping(value = "/support", method = RequestMethod.GET)
	public String support(Locale locale, Model model) {
		logger.info("Welcome home! The client locale is {}.", locale);
		
		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);
		
		String formattedDate = dateFormat.format(date);
		
		model.addAttribute("serverTime", formattedDate );
		model.addAttribute("pageTitle", "Ayuda");
		return "support";
	}
	
	
}
